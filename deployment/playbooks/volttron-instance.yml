---
- hosts: all
#  become: yes
#  become_method: sudo
  gather_facts: True
  environment:
    VOLTTRON_HOME: "{{ ansible_env.HOME }}/.volttron"
    VOLTTRON_ROOT: "{{ ansible_env.HOME }}/volttron"
    CONFIG: "{{ ansible_env.HOME }}/configs"
    HOST_CONFIG: "{{ ansible_env.HOME }}/host.config.yml"
  tasks:
    # After running this the ansible_python_interpretor is set to
    # the one explicitly created for us to execute ansible commands.
    - include_tasks: includes/ansible_venv.yml

    - debug:
        var: ansible_env
#    - debug:
#        var: hostvars

#    - gather_facts:
#      register: myfacts
##    - name: Gather Facts
##      gather_facts:
##        fact_path: "{{ ansible_env.HOME }}/facts"
##      register: myfacts
#
#    - debug:
#        var: myfacts

    # - meta: end_play

    - set_fact:
        local_remote_config_file: "{{lookup('env','DEPLOYMENT_ROOT')}}/{{inventory_hostname}}/{{inventory_hostname}}.yml"
        local_configs_dir: "{{lookup('env','DEPLOYMENT_ROOT')}}/{{inventory_hostname}}/configs"
        python3: "{{lookup('env','DEPLOYMENT_ROOT')}}/env/bin/python"

    - include_tasks: includes/copy_configs.yml
      volttron_instance_config:
        config_file: "{{ ansible_env.HOME }}/host.config.yml"
        state: "RUNNING"
      register: instance_state

    - debug:
        var: instance_state
#
#
#    - name: Installing agents
#      include_tasks: "install-agents.yml"
#      #when: "'No installed Agents found' in (volttron_status.stderr_lines)"

#    - name: Ensures {{ volttron_home }} dir exists
#      file:
#        path: "{{ volttron_home }}"
#        state: directory
#
#    - name: Create {{ volttron_home }}/config
#      template:
#        src: volttron-config.j2
#        dest: "{{ volttron_home }}/config"

#    - name: Create service file.
#      template:
#        src: volttron.service.j2
#        dest: "/etc/systemd/system/volttron.service"
#        mode: 0755


# - name: copy configs for {{ inventory_hostname }}
      #    copy:
      #      # Note the / on the end means we don't want the containing folder
      #      # only the files underneath.  So ignore 'sigma1' if it was the
      #      # host.
      #      src: "{{ local_configuration_path }}/{{ inventory_hostname }}/"
      #      dest: "{{ vlt_configuration_path }}"
      #      mode: 0644
      #    become_user: "{{ vlt_user }}"
      #    become: yes
      #    when: directory_check.stat.exists
      #
      #  - name: check for host configuration_store files
      #    local_action: stat path="{{ local_configstore_path }}/{{ inventory_hostname }}"
      #    register: directory_check
      #    ignore_errors: True
      #
      #  - name: copy configuration_store for {{ inventory_hostname }} to the instance's home.
      #    copy:
      #      # Note the / on the end means we don't want the containing folder
      #      # only the files underneath.  So ignore 'sigma1' if it was the
      #      # host.
      #      src: "{{ local_configstore_path }}/{{ inventory_hostname }}/"
      #      dest: "{{ vlt_home }}/configuration_store"
      #      mode: 0644
      #    become_user: "{{ vlt_user }}"
      #    become: yes
      #    when: directory_check.stat.exists
      #  when: work_offline is defined and not(work_offline)
